# Illustrates a directory-based data pipeline.
#
# Inspired by https://github.com/daveshap/Quickly_Extract_Science_Papers
#
# Files placed in a directory are processed as follows:
#
# 1. Extract the text from the file
# 2. Pass the text to the LLM as context
# 3. Extract the title
# 4. Ask the LLM four questions about the reference text
# 5. Store the results as a conversation, and in a summary file
# 6. If the GITHUB_GIST_ACCESS_TOKEN environment variable is set:
#    - Upload the summary file to a Gist
#    - Output the URL of the Gist
#
# Summary files are only written once -- if the summary file for a reference
# file already exists, it's skipped.
#
# An optional `url` parameter can be passed when executing the workflow -- if
# specified, the referenced file will be downloaded prior to processing the
# contents directory.
# NOTE: The URL must be a path to a downloadable file, and end with an extension
# that the text extractor can support, e.g.:
#     /workflow run file-summarizer url="https://example.com/paper.pdf"
---
- name: Summarize the contents of all files in a directory
  hosts: localhost
  vars:
    user_id: 1
    extract_title_preset: "gpt-4o-mini"
    preset: "claude-sonnet"
    content_directory: "{{ lookup('pipe', 'python -c \"import tempfile; print(tempfile.gettempdir())\"') }}/file-content"
    content_max_length: 400000
    summaries_directory: "{{ lookup('pipe', 'python -c \"import tempfile; print(tempfile.gettempdir())\"') }}/file-summaries"
    question_1: "Can you give me a very clear explanation of the core assertions, implications, and mechanics elucidated in this paper?"
    question_2: "Can you explain the value of this in basic terms? Like you're talking to a CEO. So what? What's the bottom line here?"
    question_3: "Can you give me an analogy or metaphor that will help explain this to a broad audience?"
    question_4: "Can you provide a specific example that best illustrates the key points elucidated in this paper?"
    url: null  # Optional variable for downloading a file
    github_token: "{{ lookup('env', 'GITHUB_GIST_ACCESS_TOKEN') | default(none) }}"
  tasks:
    - name: "Ensure content directory {{ content_directory }} exists"
      ansible.builtin.file:
        path: "{{ content_directory }}"
        state: directory
    - name: "Ensure summaries directory {{ summaries_directory }} exists"
      ansible.builtin.file:
        path: "{{ summaries_directory }}"
        state: directory
    - name: "Download file from URL {{ url }} to {{ content_directory }}"
      ansible.builtin.get_url:
        url: "{{ url }}"
        dest: "{{ content_directory }}/{{ url | basename }}"
      when: url is not none
    - name: "Find all files in the content directory {{ content_directory }}"
      find:
        paths: "{{ content_directory }}"
        recurse: yes
        file_type: file
      register: files_to_summarize

    - name: Process each file
      include_tasks: file-summarizer-summarize-file.yaml
      loop: "{{ files_to_summarize.files }}"
      loop_control:
        loop_var: current_file
...
